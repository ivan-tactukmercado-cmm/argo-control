# Default values for myapp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


environment:
  name: dev
  appId: model1
  ddService: diagnosis
  TZ: EST5EDT

# These values are passed directly to the postgres chart (when standalone is true)
# For details about that chart's values.yaml run the following commands:
# helm repo add cmmchartmuseum https://chartmuseum.sharedtech-stable.cmmaz.cloud
# helm show values cmmchartmuseum/postgresql --version 10.13.14
postgresql:
  enabled: true
  fullnameOverride: diagnosis-postgres
  image:
    registry: covermymeds.azurecr.io
    repository: database/postgres-database-diagnosis
    tag: latest
    pullPolicy: Always
  # Hard-coded username and passwords
  postgresqlUsername: admin
  postgresqlPassword: admin
  postgresqlPostgresPassword: admin
  containerSecurityContext:
    # Don't run as root
    runAsUser: 999
  # Persist data
  primary:
    persistence:
      enabled: true
    extraInitContainers:
    - name: copy-persisted-data
      image: covermymeds.azurecr.io/database/postgres-database-diagnosis:latest
      command: ['/bin/sh', '-c']
      args:
      - ([ "$(ls -A /bitnami/postgresql/data)" ] && echo "data directory already exists; skipping" && exit 0 || echo "copying data" &&
        mkdir -p /bitnami/postgresql/data && chown -R 999:999 /bitnami/postgresql/data && cp -p -r /var/lib/postgresql/persisted-data/* /bitnami/postgresql/data/)
      volumeMounts:
      - name: data
        mountPath: /bitnami/postgresql
  global:
    storageClass: default
  persistence:
    enabled: true


liquibase:
  image:
    # The image that the liquibase container runs
    repository: kargocmm.azurecr.io/kargo-test/myapp-liquibase
    # The liquibase image tag
    tag: latest
    pullPolicy: Always
  enabled: false
  resources:
    limits:
      cpu: 1000m
      memory: 512M
    requests:
      cpu: 512m
      memory: 128M